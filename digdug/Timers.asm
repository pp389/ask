PROC Clock
	CALL getMill
	SUB  DL, [CLOCK_BASE]
	CMP  DL, 1
	JAE  @@Clock
	JMP  @@END_PROC

@@CLOCK: 
	CALL TMR_MOVE
	CALL PLAYER_ANIMATION
	CALL TMR_GMODE
	CALL TMR_GMOVE


	CALL getMill
	XCHG [Clock_Base], DL
	
	
	@@END_PROC:
	RET
ENDP CLOCK

PROC getMill
	PUSH AX
	PUSH BX
	PUSH CX

	MOV AH, 2CH
	INT 21H
	XOR DH, DH

	POP AX
	POP BX
	POP CX
	RET
ENDP getMill
	
PROC DELAY

	_CX EQU [BP + 6]
	_DX EQU [BP + 4]
	
	PUSH BP
	MOV  BP, SP
	
	PUSH AX
	PUSH CX
	PUSH DX

	MOV CX, _CX
	MOV DX, _DX
	MOV AH, 86h
	INT 15h


@@END_PROC: ;{
	POP DX
	POP CX
	POP AX
	POP BP
	RET 4

ENDP DELAY

PROC TMR_MOVE
	PUSH AX
	
	INC [WORD PTR CNT_MOV]
	
		MOV AX, [INT_MOV]
		CMP AX, [CNT_MOV]
		JZ 	@@TICK
		JMP @@END_PROC
	
	@@TICK:
		MOV [WORD PTR CNT_MOV], 0
		CALL PLAYER_MOVE
		CALL TESTLOSE
	
	@@END_PROC:
	POP AX
	RET
ENDP TMR_MOVE

PROC TMR_GMODE

	PUSH AX
	PUSH BX
	

		MOV AL, [IS_FRIGH]
		DEC AL
		NEG AL
		XOR AH, AH
		ADD [CNT_MODE], AX
	
		MOV AX, [INT_MODE]
		CMP AX, [CNT_MODE]
		JZ 	@@TICK
		JMP @@END_PROC
	
@@TICK:
	MOV [WORD PTR CNT_MODE], 0
	MOV BX, OFFSET MONSTERS
	
	CMP [WORD PTR PREV_MODE], MODE_SCAT
	JZ  @@CHASE	

	PUSH [INT_SCAT]
	POP  [INT_MODE]
	
	MOV AX, MODE_SCAT
	MOV [PREV_MODE], AX 
	
	JMP @@MODE_LOOP

@@CHASE: ;{
	PUSH [INT_CHASE]
	POP  [INT_MODE]
	
	MOV AX, MODE_CHASE
	MOV [PREV_MODE], AX

@@MODE_LOOP: 
	PUSH AX
	MOV [M_MODE], AX
	
	MOV AX, [M_DIR]
	NEG AL
	NEG AH
	MOV [M_DIR], AX
	
	POP AX
	
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@MODE_LOOP
		
	
@@END_PROC:
	POP BX
	POP AX
	RET
ENDP TMR_GMODE


PROC TMR_GMOVE
	PUSH AX
	
	INC [WORD PTR CNT_GMOV]

	MOV AX, [INT_GMOV]
	CMP AX, [CNT_GMOV]
	JBE @@TICK
	JMP @@END_PROC

@@TICK:
	CALL TESTLOSE
	MOV [WORD PTR CNT_GMOV], 0
	CALL M_TARGET
	CALL M_MOVE
	CALL TESTLOSE

@@END_PROC:
	POP AX
	RET
ENDP TMR_GMOVE


