PROC M_TARGET
	PUSH BX
	MOV  BX, OFFSET MONSTERS

	CMP  [WORD PTR M_MODE], MODE_CHASE
	JZ   @@CHASE

	MOV [WORD PTR M_TARX], 198
	MOV [WORD PTR M_TARY], 0
	
	ADD BX, [ARR_JMP]
	
	MOV [WORD PTR M_TARX], 0
	MOV [WORD PTR M_TARY], 0
	
	ADD BX, [ARR_JMP]

	MOV [WORD PTR M_TARX], 198
	MOV [WORD PTR M_TARY], 189
	ADD BX, [ARR_JMP] 
	MOV [WORD PTR M_TARX], 0
	MOV [WORD PTR M_TARY], 189
	JMP @@END_PROC	
		
@@CHASE:
	CALL RED_AI
	CALL PINK_AI
	CALL BLUE_AI
	CALL ORANGE_AI
	
	@@END_PROC:
	POP BX
	RET
ENDP M_TARGET


PROC M_PRINT
	PUSH CX
	PUSH DX

	CMP [WORD PTR M_ENABLED], FALSE
	JNZ @@PRINT		
	JMP @@END_PROC	

@@PRINT:
	CMP [BYTE PTR IS_FRIGH], TRUE
	JZ  @@PRINT_FIRGH

	PUSH OFFSET GHOST_0
	PUSH [M_COLOR]
	PUSH [M_X]
	PUSH [M_Y]
	CALL GRAPHICS_PRINTIMAGE

	MOV CX, [M_X]
	MOV DX, [M_Y]

	INC CX
	ADD DX, 2

	PUSH CX
	PUSH DX
	PUSH 3
	PUSH 3
	PUSH WHITE
	CALL GRAPHICS_PRINTRECT

	ADD  CX, 4
	PUSH CX
	PUSH DX
	PUSH 3
	PUSH 3
	PUSH WHITE
	CALL GRAPHICS_PRINTRECT

	CMP [WORD PTR M_DIR], DIR_U
	JZ  @@UP

	CMP [WORD PTR M_DIR], DIR_D
	JZ  @@DOWN
	

	CMP [WORD PTR M_DIR], DIR_L
	JZ  @@LEFT
	

	JMP @@RIGHT
	
@@UP: 
	INC CX
	JMP @@EYEBALLS


@@DOWN: 
	INC CX
	ADD DX, 2
	JMP @@EYEBALLS


@@LEFT: 
	INC DX
	JMP @@EYEBALLS


@@RIGHT: 
	ADD CX, 2
	INC DX


@@EYEBALLS: 
	PUSH CX
	PUSH DX
	PUSH 1
	PUSH 1
	PUSH BLACK
	CALL GRAPHICS_PRINTRECT
	
	SUB CX, 4
	
	PUSH CX
	PUSH DX
	PUSH 1
	PUSH 1
	PUSH BLACK
	CALL GRAPHICS_PRINTRECT
	
	JMP @@END_PROC
	
	
@@PRINT_FIRGH:
	PUSH SI
	MOV SI, [M_BLINK]
	INC SI
	SHL SI, 1
	ADD SI, OFFSET M_FRI_COL
	
	PUSH OFFSET GHOST_0
	PUSH [SI]
	PUSH [M_X]
	PUSH [M_Y]
	CALL GRAPHICS_PRINTIMAGE


	PUSH OFFSET FRIGH_EYES
	PUSH [SI + 2]
	PUSH [M_X]
	PUSH [M_Y]
	CALL GRAPHICS_PRINTIMAGE
	
	POP SI
	

@@END_PROC: 
	POP DX
	POP CX
	RET

ENDP M_PRINT



PROC M_CLEAR
	CMP [WORD PTR M_ENABLED], TRUE
	JZ  @@ENABLED	
	JMP @@END_PROC

@@ENABLED:
	CMP [WORD PTR M_X], 0
	JNZ @@CLEAR
	
	CMP [WORD PTR M_Y], 0
	JNZ @@CLEAR
	JMP @@END_PROC

@@CLEAR: 
	PUSH [M_X]
	PUSH [M_Y]
	PUSH 9
	PUSH 9
	PUSH BLACK
	CALL GRAPHICS_PRINTRECT
@@END_PROC: 
	MOV [WORD PTR M_OBJ], OBJ_VOID
	RET 
ENDP M_CLEAR


PROC M_GETPOSDIR
	PUSH AX
	PUSH CX
	PUSH DX

	MOV CX, [M_X]
	MOV DX, [M_Y]

	CMP DX, 144
	JZ  @@TRUE_Y
	
	CMP DX, 72
	JZ  @@TRUE_Y
	JMP @@FALSE

@@TRUE_Y: 
	CMP CX, 90
	JZ  @@TRUE_X
	CMP CX, 108
	JNZ @@FALSE

@@TRUE_X: 
	MOV [WORD PTR M_PDIR_U], LOC_N
	JMP @@DOWN


@@FALSE:
	SUB DX, 9	
	MOV [WORD PTR M_PDIR_U], LOC_N	
	PUSH CX
	PUSH DX
	CALL CLEAR_MOVE
	JNC @@DOWN	

	MOV AH, CL
	MOV AL, DL
	MOV [M_PDIR_U], AX


	@@DOWN: 
	MOV CX, [M_X]
	MOV DX, [M_Y]
	ADD DX, 9
	MOV [WORD PTR M_PDIR_D], LOC_N

	PUSH CX
	PUSH DX
	CALL CLEAR_MOVE
	JNC @@LEFT

	MOV AH, CL
	MOV AL, DL
	MOV [M_PDIR_D], AX
		
@@LEFT: 
	MOV CX, [M_X]
	MOV DX, [M_Y]
	SUB CX, 9
	MOV [WORD PTR M_PDIR_L], LOC_N
	
	CMP CX, 0FFF7h		
	JNZ @@NO_OVERFLOW_L	
	
	MOV CX, 198			
	
	@@NO_OVERFLOW_L:
	PUSH CX
	PUSH DX
	CALL CLEAR_MOVE
	JNC @@RIGHT
	
	MOV AH, CL
	MOV AL, DL
	MOV [M_PDIR_L], AX		
		
		
@@RIGHT: 
	MOV CX, [M_X]
	MOV DX, [M_Y]
	ADD CX, 9
	MOV [WORD PTR M_PDIR_R], LOC_N

	CMP CX, 207			
	JNZ @@NO_OVERFLOW_R	
	MOV CX, 0			
	
	@@NO_OVERFLOW_R:
	PUSH CX
	PUSH DX
	CALL CLEAR_MOVE
	JNC @@BACK
	
	MOV AH, CL
	MOV AL, DL
	MOV [M_PDIR_R], AX
	
	
@@BACK: 
	MOV AX, [M_DIR]
	NEG AL	
	NEG AH	
	
	MOV CH, [BYTE PTR M_X]
	MOV CL, [BYTE PTR M_Y]				
	
	ADD CL, AL	
	ADD CH, AH		
	CMP CH, 0F7h
	JZ  @@OVERFLOW_L
	
	CMP CH, 207
	JZ  @@OVERFLOW_R
	JMP @@AFTER_OVERFLOW
	
@@OVERFLOW_L:
	MOV CH, 198
	JMP @@AFTER_OVERFLOW

@@OVERFLOW_R:
	MOV CH, 0


@@AFTER_OVERFLOW:
	MOV AX, BX
	ADD AX, 16
	
	PUSH CX		
	PUSH LOC_N	
	PUSH 4 		
	PUSH AX		
	CALL FINDNREP_W 

@@END_PROC: 
	POP DX
	POP CX
	POP AX
	RET
ENDP M_GETPOSDIR


PROC CLEAR_MOVE
	PX_X EQU [WORD PTR BP + 6]
	PX_Y EQU [WORD PTR BP + 4]

	PUSH BP
	MOV  BP, SP
	
	PUSH AX

	ADD PX_X, 4
	ADD PX_Y, 4

	PUSH PX_X
	PUSH PX_Y
	CALL GRAPHICS_GETCOLOR
	
	CMP AL, BROWN
	JZ  @@NOT_CLEAR
	
	@@CLEAR:
	STC	
	JMP @@END_PROC
	
	@@NOT_CLEAR:
	CLC	
	

@@END_PROC:
	POP AX
	POP BP
	RET 4

ENDP CLEAR_MOVE

PROC M_NORMAL_AI
	PUSH AX
	PUSH DI

	MOV AL, [BYTE PTR M_TARY]
	MOV AH, [BYTE PTR M_TARX]
	XOR DI, DI
		
@@DIST_LOOP:
	CMP [WORD PTR M_PDIR + DI], LOC_N 
	JZ  @@END_DIST
	
	PUSH AX
	PUSH [M_PDIR + DI]
	CALL MATH_DIST	
	
	POP  [M_PDIR + DI]
	
@@END_DIST:
	ADD DI, 2
	CMP DI, 8
	JNZ @@DIST_LOOP

	MOV DI, BX
	ADD DI, 16
	
	PUSH 4
	PUSH DI
	CALL FINDMIN_W	
	POP DI			
			
			
	CMP DI, IDIR_R
	JZ  @@RIGHT

	CMP DI, IDIR_D
	JZ  @@DOWN

	CMP DI, IDIR_L
	JZ  @@LEFT

@@UP:	
	MOV [WORD PTR M_DIR], DIR_U
	JMP @@END_PROC


@@DOWN: 
	MOV [WORD PTR M_DIR], DIR_D
	JMP @@END_PROC


@@LEFT:	
	MOV [WORD PTR M_DIR], DIR_L
	JMP @@END_PROC

@@RIGHT:
	MOV [WORD PTR M_DIR], DIR_R

@@END_PROC: 
	POP DI
	POP AX
	RET
		
ENDP M_NORMAL_AI


PROC M_FRIGH_AI
	PUSH AX
	PUSH DI
	
	MOV AL, [BYTE PTR PACY]
	MOV AH, [BYTE PTR PACX]
	XOR DI, DI

@@DIST_LOOP:
	CMP [WORD PTR M_PDIR + DI], LOC_N
	JZ  @@END_DIST
	
	PUSH AX
	PUSH [M_PDIR + DI]
	CALL MATH_DIST
	
	POP  [M_PDIR + DI]
			
@@END_DIST: 
	ADD DI, 2
	CMP DI, 8
	JNZ @@DIST_LOOP
			
	MOV DI, BX
	ADD DI, 16
			
			
	PUSH 4
	PUSH DI
	CALL FINDMAX_W
	POP DI

	CMP DI, IDIR_R
	JZ  @@RIGHT

	CMP DI, IDIR_D
	JZ  @@DOWN
			
			
	CMP DI, IDIR_L
	JZ  @@LEFT
			
@@UP:	
	MOV [WORD PTR M_DIR], DIR_U
	JMP @@END_PROC


@@DOWN: 
	MOV [WORD PTR M_DIR], DIR_D
	JMP @@END_PROC

@@LEFT:	
	MOV [WORD PTR M_DIR], DIR_L
	JMP @@END_PROC

@@RIGHT:
	MOV [WORD PTR M_DIR], DIR_R

@@END_PROC: 
	POP DI
	POP AX
	RET

ENDP M_FRIGH_AI



PROC M_MOVE
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BX, OFFSET MONSTERS
@@CLEAR_LOOP: 
	CALL M_CLEAR
@@END_CLEAR: 
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@CLEAR_LOOP
	MOV BX, OFFSET MONSTERS
		
@@MOVE_LOOP:
	CMP [WORD PTR M_ENABLED], FALSE
	JZ  @@END_MOVE

	CALL M_GETPOSDIR

	CMP [IS_FRIGH], TRUE
	JZ  @@FRIGH_AI
		

	CALL M_NORMAL_AI
	JMP @@MOVE_GHOST
	
	
	@@FRIGH_AI: 
	CALL M_FRIGH_AI
			
@@MOVE_GHOST:
	MOV CX, [M_X]
	MOV DX, [M_Y]

	ADD CL, [BYTE PTR M_DIR + 1]
	ADD DL, [BYTE PTR M_DIR]

	CMP CL, 0F7h
	JZ  @@OVERFLOW_L
	
	CMP CX, 207
	JZ  @@OVERFLOW_R
	JMP @@TEST_OBJ
	
	@@OVERFLOW_L:
	MOV CX, 198
	JMP @@TEST_OBJ
	
	@@OVERFLOW_R:
	MOV CX, 0

@@TEST_OBJ: ;{		
	PUSH CX
	PUSH DX
	CALL M_FINDOBJ	
	POP  [M_OBJ]

	MOV [M_X], CX
	MOV [M_Y], DX

@@END_MOVE: ;{
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@MOVE_LOOP
		
		MOV BX, OFFSET MONSTERS
@@PRINT_LOOP: 
	CALL M_PRINT
	
@@END_PRINT: 
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@PRINT_LOOP
	
	
@@END_PROC: 
	POP DX
	POP CX
	POP BX
	RET

ENDP M_MOVE


PROC M_FINDOBJ
	PX_X EQU [WORD PTR BP + 6]
	PX_Y EQU [WORD PTR BP + 4]

	PUSH BP
	MOV  BP, SP
	
	PUSH AX
	PUSH BX

	ADD PX_X, 4
	ADD PX_Y, 4

	PUSH PX_X
	PUSH PX_Y
	CALL GRAPHICS_GETCOLOR
	
	CMP AL, BROWN
	JZ  @@WALL

	CMP AL, BLACK
	JZ  @@VOID
	SUB  PX_X, 4
	SUB  PX_Y, 4
	
	PUSH PX_X
	PUSH PX_Y
	CALL M_TRACE
	POP BX			
	
	CMP BX, [ARR_END]
	JZ  @@VOID
	
	PUSH [M_OBJ]
	POP  PX_X 
	JMP  @@END_PROC

@@WALL: 
	MOV PX_X, OBJ_WALL
	JMP @@END_PROC

@@VOID: 
	MOV PX_X, OBJ_VOID
	
@@END_PROC: 
	POP BX
	POP AX
	POP BP
	
	RET 2
ENDP M_FINDOBJ


PROC M_INIT
	MOV BX, OFFSET MONSTERS
	MOV [WORD PTR M_COLOR], RED
	ADD BX, [ARR_JMP]
	MOV [WORD PTR M_COLOR], PINK
	ADD BX, [ARR_JMP]
	MOV [WORD PTR M_COLOR], light_cyan
	ADD BX, [ARR_JMP] 
	MOV [WORD PTR M_COLOR], orange
	RET
ENDP M_INIT

PROC M_ENABLE
	MOV  [WORD PTR M_ENABLED], TRUE
	MOV  [WORD PTR M_X], 9
	MOV  [WORD PTR M_Y], 63
	CALL M_PRINT
	RET
ENDP M_ENABLE

PROC ENABLE_MONSTERS
	PUSH BX
	MOV  BX, OFFSET MONSTERS
@@LOOP: 
	CMP [WORD PTR M_ENABLED], TRUE	
	JZ  @@END_LOOP					
	
	;IF NO:
	CMP [WORD PTR M_MODE], MODE_DEAD 
	JZ  @@END_LOOP					
	
	CALL M_ENABLE		
	
	@@END_LOOP:
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ  @@LOOP

	POP BX
	RET
ENDP ENABLE_MONSTERS


PROC M_TRACE
	PUSH BP
	MOV  BP, SP
	
	PX_X EQU [BP + 6]
	PX_Y EQU [BP + 4]
	
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BX, OFFSET MONSTERS
	
	MOV CX, PX_X
	MOV DX, PX_Y
	
@@TRACE_LOOP: 
	CMP [M_X], CX
	JZ  @@TRUE
	
@@TRUE:
CMP [M_Y], DX
JNZ @@END_TRACE

	JMP @@END_PROC

@@END_TRACE: 
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@TRACE_LOOP


@@END_PROC: 
	MOV PX_X, BX
	
	POP DX
	POP CX
	POP BX
	POP BP
	RET 2

ENDP M_TRACE

PROC M_ZERO
	PUSH BX
	PUSH CX

	MOV BX, OFFSET MONSTERS
	MOV CX, 56
	
@@ZERO_LOOP: 
	MOV [WORD PTR BX], 0
	ADD BX, 2
	LOOP @@ZERO_LOOP


@@END_PROC: 
	POP CX
	POP BX
	RET

ENDP M_ZERO