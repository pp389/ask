PROC TestLose
	PUSH AX
	PUSH BX
	MOV  BX, OFFSET MONSTERS 
	
@@COLL_LOOP:
	CMP [WORD PTR M_ENABLED], TRUE
	JNZ @@END_LOSE	

	MOV AX, [PACX]
	CMP AX, [M_X]
	JNZ @@END_LOSE 


	MOV AX, [PACY]
	CMP AX, [M_Y]
	JNZ @@END_LOSE 

	PUSH 10
	CALL UPDATE_SCORE
	
@@EAT:
	CALL EAT_GHOST

@@END_LOSE:
	ADD BX, [ARR_JMP]
	CMP BX, [ARR_END]
	JNZ @@COLL_LOOP
	
	POP BX
	POP AX
	RET
ENDP TestLose


PROC GAME_INPUT
	PUSH AX
	PUSH CX
	PUSH DX
	
	MOV AH, 1
	INT 16H   

	JNZ @@NEWDATA 
	JMP	@@END_PROC	
@@NEWDATA:
	MOV AH, 0
	INT 16H   
	MOV CX, [PACX]
	MOV DX, [PACY]
	
	ADD CX, 4
	ADD DX, 4
			
	CMP AH, ARR_U  
	JZ  @@UP
	
	CMP AH, ARR_D   
	JZ  @@DOWN
	
	CMP AH, ARR_L    
	JZ  @@LEFT
	
	CMP AH, ARR_R    
	JZ  @@RIGHT
	
	CMP AH, 1        
	JZ  @@PAUSE      
	JMP @@END_PROC
				
@@PAUSE: 
	
	PUSH 29
	PUSH 5
	CALL TEXT_SET_CURPOS
	
	PUSH OFFSET STR_PAUSED
	CALL TEXT_PRINT_MSG

	PUSH 27
	PUSH 6
	CALL TEXT_SET_CURPOS
	
	PUSH OFFSET STR_PAUSED_1
	CALL TEXT_PRINT_MSG

	PUSH 26
	PUSH 7
	CALL TEXT_SET_CURPOS
	
	PUSH OFFSET STR_PAUSED_2
	CALL TEXT_PRINT_MSG
					
					
@@PAUSE_LOOP: 
	MOV AH, 7
	INT 21H

	CMP  AL, 'e'
	JNZ  @@DONT_EXIT
	CALL END_GAME
	CALL MAINMENU
@@DONT_EXIT: 
	CMP AL, 'r'	
	JNZ @@PAUSE_LOOP 
	
	
		PUSH 208
		PUSH 40
		PUSH 96
		PUSH 24
		PUSH BLACK
		CALL GRAPHICS_PRINTRECT
	
	
	JMP @@END_PROC 
	
			
@@UP: 
	SUB DX, 9
	MOV AX, DIR_U
	JMP @@Update


@@DOWN: 
	ADD DX, 9
	MOV AX, DIR_D
	JMP @@Update

@@LEFT: 
	SUB CX, 9
	MOV AX, DIR_L
	JMP @@Update

@@RIGHT: 
	ADD CX, 9
	MOV AX, DIR_R
	
@@Update:
	PUSH CX
	PUSH DX
	CALL CLEAR_MOVE
	JNC  @@NextDir
	
	MOV [DIR], AX
	MOV [WORD PTR NEXTDIR], DIR_N
	JMP @@END_PROC
	
	@@NextDir:
	MOV [NEXTDIR], AX
	
@@END_PROC: 
	XOR AL, AL
	MOV AH, 0CH
	INT 21H

	POP DX
	POP CX
	POP AX
	RET
ENDP GAME_INPUT


PROC EAT_GHOST
	MOV  [WORD PTR M_ENABLED], FALSE
	MOV  [WORD PTR M_MODE], MODE_DEAD

	CALL M_CLEAR
	CALL PLAYER_ANIMATION

	PUSH 06h
	PUSH 4000h
	CALL DELAY

	PUSH 29
	PUSH 13
	CALL TEXT_SET_CURPOS
	
	PUSH BLACK
	PUSH OFFSET PRINT_DEC
	CALL TEXT_COLORSTR

	RET

ENDP EAT_GHOST


PROC UPDATE_SCORE
		PUSH BP
		MOV  BP, SP
		NUMBER EQU [WORD PTR BP + 4]
		PUSH AX

		MOV AX, NUMBER
		ADD [SCORE], AX
		PUSHA
		call BeepScore
		POPA
	
	@@PRINT_SCORE:
		PUSH 29
		PUSH 12
		CALL TEXT_SET_CURPOS
		
		PUSH OFFSET ARR_DEC
		PUSH [SCORE]
		CALL HEX2DEC
		
		PUSH OFFSET ARR_DEC
		CALL TEXT_PRINTDEC
	
	CMP NUMBER, 50
	JBE @@END_PROC

		PUSH 29
		PUSH 13
		CALL TEXT_SET_CURPOS
		
		PUSH OFFSET ARR_DEC
		PUSH NUMBER
		CALL HEX2DEC
		
		PUSH OFFSET ARR_DEC
		CALL TEXT_PRINTDEC
		
		PUSH 29
		PUSH 13
		CALL TEXT_SET_CURPOS
		
		PUSH GREEN
		PUSH OFFSET PRINT_DEC
		CALL TEXT_COLORSTR
	
	@@END_PROC: 
		POP AX
		POP BP
		RET 2
ENDP UPDATE_SCORE


PROC INPUT_LOOP
@@LOOP: 
	CALL GAME_INPUT
	JMP @@LOOP
	RET
ENDP INPUT_LOOP


PROC NEW_LEVEL
	MOV [WORD PTR SPEED],        4  
	MOV [WORD PTR DUR_1ST_SCAT], 216 
	MOV [WORD PTR DUR_CHASE],    270 
	MOV [WORD PTR DUR_SCAT],     126 
	MOV [WORD PTR DUR_FRI],      108 
	JMP  @@RESET_GAME
	
	
@@RESET_GAME: 
	CALL LAYOUT_CLEAR	
	MOV  AX, BROWN
	CALL LAYOUT_PRINT	
	
	CALL RESET_LIFE
	CALL PLAYER_PRINT

	
	PUSH 29
	PUSH 11
	CALL TEXT_SET_CURPOS
	
	PUSH OFFSET STR_SCORE
	CALL TEXT_PRINT_MSG

	PUSH 29
	PUSH 12
	CALL TEXT_SET_CURPOS
	
	PUSH OFFSET ARR_DEC
	PUSH [SCORE]
	CALL HEX2DEC
	
	PUSH OFFSET ARR_DEC
	CALL TEXT_PRINTDEC

	XOR AL, AL
	MOV AH, 0CH
	INT 21H
	
	ADD SP, 10
	JMP GetFirstDir	
	RET
ENDP NEW_LEVEL

PROC Del 
    MOV CX, 1 
    MOV dx, 3dah
loop11:
    PUSH CX
l1:
    IN AL, dx
    AND AL, 08h
    jnz l1
l2:
   IN AL, dx
   AND AL, 08h
   jz l2
   POP CX
   LOOP loop11
   ret
ENDP Del 

PROC BeepScore
	IN AL, 61h
	OR AL, 00000011b
	OUT 61h, AL
	MOV AL, 0B6h
	OUT 43h, AL
	MOV ax, 0feah
	OUT 42h, AL 
	MOV AL, ah
	OUT 42h, AL 
	MOV CX, 8 
bs:
	PUSH CX 
	CALL Del
	POP CX 
	LOOP bs
	IN AL, 61h
	AND AL, 11111100b
	OUT 61h, AL
	RET
ENDP BeepScore


PROC RESET_LIFE
	PUSH AX
		
	CALL M_ZERO
	CALL M_INIT

	MOV AX, [SPEED]
	
	MOV  [INT_MOV],  AX
	MOV  [WORD PTR CNT_MOV], 0
	
	MOV  [INT_GMOV], AX
	MOV  [WORD PTR CNT_GMOV], 0

	MOV  AX, [DUR_1ST_SCAT]
	MOV  [INT_MODE], AX
	MOV  [WORD PTR CNT_MODE], 0

	MOV AX, [DUR_CHASE]
	MOV [INT_CHASE], AX
	
	MOV AX, [DUR_SCAT]
	MOV [INT_SCAT], AX
		

	MOV AX, [DUR_FRI]
	MOV [INT_FRI], AX
	MOV [CNT_FRI], 0
	
	MOV [CNT_BLINK], 0

	MOV  [WORD PTR PACX], 63
	MOV  [WORD PTR PACY], 9
	MOV  [WORD PTR DIR], DIR_N
	MOV  [WORD PTR NEXTDIR], DIR_N
	MOV  [WORD PTR PLAYER_FP], 0

	POP AX
	RET
ENDP RESET_LIFE

PROC NEW_GAME
	MOV [WORD PTR LEVEL], 0
	MOV [WORD PTR SCORE], 0
	
	MOV [BYTE PTR HP_FLAG], FALSE
	
	CALL NEW_LEVEL
	CALL M_ENABLE
	RET
ENDP NEW_GAME


PROC END_GAME
	CALL LAYOUT_CLEAR
	
		PUSH 15
		PUSH 11
		CALL TEXT_SET_CURPOS
		
		PUSH RED
		PUSH OFFSET STR_GAMEOVER
		CALL TEXT_COLORSTR

		PUSH 15
		PUSH 13
		CALL TEXT_SET_CURPOS
		
		PUSH OFFSET STR_SCORE
		CALL TEXT_PRINT_MSG
		PUSH 21
		PUSH 13
		CALL TEXT_SET_CURPOS
	
		PUSH OFFSET ARR_DEC
		PUSH [SCORE]
		CALL HEX2DEC
		
		PUSH OFFSET ARR_DEC
		CALL TEXT_PRINTDEC
	
	RET
ENDP END_GAME