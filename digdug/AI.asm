PROC RED_AI
	PUSH BX

	MOV BX, OFFSET MONSTERS
	PUSH [PACX]
	POP  [M_TARX]
	
	PUSH [PACY]
	POP  [M_TARY]

@@END_PROC: 
	POP BX
	RET

ENDP RED_AI

PROC PINK_AI
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BX, OFFSET MONSTERS
	ADD BX, [ARR_JMP]

	MOV AX, [PACX]
	MOV DX, [PACY]
	MOV CX, 3
		
@@TILE_LOOP:
	ADD AL, [BYTE PTR DIR + 1]
	ADD DL, [BYTE PTR DIR]

		
	CMP AL, 0F7h
	JZ  @@OVERFLOW_L
	
	CMP AX, 207
	JZ  @@OVERFLOW_R
	JMP @@END_TILE
	
	
	@@OVERFLOW_L:
	MOV AX, 198
	JMP @@END_TILE
	
	@@OVERFLOW_R:
	MOV AX, 0
	JMP @@END_TILE
	
	@@END_TILE:
	LOOP @@TILE_LOOP
	
	MOV [M_TARX], AX
	MOV [M_TARY], DX

@@END_PROC:
	POP DX
	POP CX
	POP BX
	POP AX
	RET
ENDP PINK_AI


PROC BLUE_AI
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX

	MOV BX, OFFSET MONSTERS
	MOV CX, [PACX]
	MOV DX, [PACY]
	
	SUB CX, [M_X]
	SUB DX, [M_Y]

	ADD BX, [ARR_JMP] 
	ADD BX, [ARR_JMP]

	MOV AX, [PACX]
	ADD AX, CX
	MOV [M_TARX], AX

	MOV AX, [PACY]
	ADD AX, DX
	MOV [M_TARY], AX
@@END_PROC: 
	POP DX
	POP CX
	POP BX
	POP AX
	RET
ENDP BLUE_AI

PROC ORANGE_AI
	PUSH AX
	PUSH BX
	PUSH CX

	MOV BX, OFFSET MONSTERS
	ADD BX, [ARR_JMP]
	ADD BX, [ARR_JMP]
	ADD BX, [ARR_JMP]

	MOV AL, [BYTE PTR PACX]
	MOV AH, [BYTE PTR PACY]
	
	MOV CL, [BYTE PTR M_X]
	MOV CH, [BYTE PTR M_Y]
	
	PUSH AX
	PUSH CX
	CALL MATH_DIST	
	POP AX

	CMP AX, 6
	JBE @@FALLBACK

	PUSH [PACX]
	POP  [M_TARX]
	
	PUSH [PACY]
	POP  [M_TARY]
	JMP  @@END_PROC


@@FALLBACK:	
	MOV [WORD PTR M_TARX], 198
	MOV [WORD PTR M_TARY], 189

@@END_PROC: 
	POP CX
	POP BX
	POP AX
	RET

ENDP ORANGE_AI

